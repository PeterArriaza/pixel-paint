{"version":3,"sources":["Colors.js","components/Pixel.js","components/Canvas.js","components/ColorPicker.js","components/CanvasOptions.js","App.js","serviceWorker.js","index.js"],"names":["props","className","background","current","onClick","Canvas","size","maxWidth","useState","Array","fill","map","matrix","setMatrix","styles","StyleSheet","create","canvas","maxHeight","display","flexWrap","marginTop","css","row","rowIndex","_","colIndex","Pixel","key","Colors","newMatrix","JSON","parse","stringify","currentColor","changeColor","color","index","setColor","CanvasOptions","setSize","type","placeholder","min","onChange","e","target","value","setCanvasSize","App","canvasSize","ColorPicker","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAAe,G,MAAA,CAAC,QAAS,YAAa,OAAQ,aCE/B,WAAAA,GACb,OACE,yBACEC,UAAS,UAAKD,EAAME,WAAX,kBACPF,EAAMG,QAAU,gBAAkB,IAEpCC,QAASJ,EAAMI,W,OCyCNC,EA5CA,SAAAL,GACb,IAAIM,EAAON,EAAMM,KACXC,EAAkB,GAAPD,EAFK,EAGME,mBAC1BC,MAAMH,GACHI,OACAC,KAAI,kBAAMF,MAAMH,GAAMI,KAAK,OANV,mBAGfE,EAHe,KAGPC,EAHO,KAchBC,EAASC,IAAWC,OAAO,CAE/BC,OAAQ,CACNV,SAAUA,EACVW,UAAWX,EACXY,QAAS,OACTC,SAAU,OACVC,UAAW,MAMf,OACE,yBAAKpB,UAAWqB,YAAIR,EAAOG,SACxBL,EAAOD,KAAI,SAACY,EAAKC,GAAN,OACVD,EAAIZ,KAAI,SAACc,EAAGC,GACV,OACE,kBAACC,EAAD,CACEC,IAAG,UAAKJ,EAAL,YAAiBE,GACpBxB,WAAY2B,EAAOjB,EAAOY,GAAUE,IACpCtB,QAAS,kBA3BD,SAACoB,EAAUE,GAC7B,IAAMI,EAAYC,KAAKC,MAAMD,KAAKE,UAAUrB,IAC5CkB,EAAUN,GAAUE,GAAY1B,EAAMkC,aACtCrB,EAAUiB,GAwBeK,CAAYX,EAAUE,cCpCpC,WAAA1B,GACb,OACE,yBAAKC,UAAU,eACZ4B,EAAOlB,KAAI,SAACyB,EAAOC,GAClB,OACE,kBAACV,EAAD,CACEC,IAAKS,EACLnC,WAAYkC,EACZjC,QAAS0B,EAAO7B,EAAMkC,gBAAkBE,EACxChC,QAAS,kBAAMJ,EAAMsC,SAASD,WCM3BE,EAjBO,SAAAvC,GAAU,IAAD,EACLQ,mBAAS,IADJ,mBACtBF,EADsB,KAChBkC,EADgB,KAE7B,OACE,6BACE,2BACEC,KAAK,SACLC,YAAY,cACZC,IAAI,IACJC,SAAU,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOC,UAElC,4BAAQN,KAAK,SAASrC,QAAS,kBAAMJ,EAAMgD,cAAc1C,KAAzD,mBCSS2C,EAfH,WAAO,IAAD,EACUzC,mBAAS,GADnB,mBACT4B,EADS,KACFE,EADE,OAEoB9B,mBAAS,IAF7B,mBAET0C,EAFS,KAEGF,EAFH,KAIhB,OACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,CAAe+C,cAAe,SAAA1C,GAAI,OAAI0C,EAAc1C,MACpD,yBAAKL,UAAU,UACb,kBAACkD,EAAD,CAAajB,aAAcE,EAAOE,SAAU,SAAAF,GAAK,OAAIE,EAASF,MAC9D,kBAAC,EAAD,CAAQF,aAAcE,EAAO9B,KAAM4C,OCHvBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.375d957e.chunk.js","sourcesContent":["export default ['white', 'lightblue', 'blue', 'darkblue'];\r\n","import React from 'react';\r\n\r\nexport default props => {\r\n  return (\r\n    <div\r\n      className={`${props.background} pixel ${\r\n        props.current ? 'current-color' : ''\r\n      }`}\r\n      onClick={props.onClick}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Colors from '../Colors';\r\nimport Pixel from './Pixel';\r\nimport { StyleSheet, css } from 'aphrodite';\r\n\r\nconst Canvas = props => {\r\n  let size = props.size;\r\n  const maxWidth = size * 30;\r\n  const [matrix, setMatrix] = useState(\r\n    Array(size)\r\n      .fill()\r\n      .map(() => Array(size).fill(0))\r\n  );\r\n  const changeColor = (rowIndex, colIndex) => {\r\n    const newMatrix = JSON.parse(JSON.stringify(matrix));\r\n    newMatrix[rowIndex][colIndex] = props.currentColor;\r\n    setMatrix(newMatrix);\r\n  };\r\n\r\n  const styles = StyleSheet.create({\r\n    // 30px * # Pixels\r\n    canvas: {\r\n      maxWidth: maxWidth,\r\n      maxHeight: maxWidth,\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      marginTop: 30\r\n    }\r\n  });\r\n\r\n  // useEffect(() => (size = props.size));\r\n\r\n  return (\r\n    <div className={css(styles.canvas)}>\r\n      {matrix.map((row, rowIndex) =>\r\n        row.map((_, colIndex) => {\r\n          return (\r\n            <Pixel\r\n              key={`${rowIndex}-${colIndex}`}\r\n              background={Colors[matrix[rowIndex][colIndex]]}\r\n              onClick={() => changeColor(rowIndex, colIndex)}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React from 'react';\r\nimport Pixel from './Pixel';\r\nimport Colors from '../Colors';\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"colorpicker\">\r\n      {Colors.map((color, index) => {\r\n        return (\r\n          <Pixel\r\n            key={index}\r\n            background={color}\r\n            current={Colors[props.currentColor] === color}\r\n            onClick={() => props.setColor(index)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nconst CanvasOptions = props => {\r\n  const [size, setSize] = useState(20);\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Canvas Size\"\r\n        min=\"0\"\r\n        onChange={e => setSize(e.target.value)}\r\n      />\r\n      <button type=\"button\" onClick={() => props.setCanvasSize(size)}>\r\n        Resize Canvas\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasOptions;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Canvas from './components/Canvas';\nimport ColorPicker from './components/ColorPicker';\nimport CanvasOptions from './components/CanvasOptions';\n\nconst App = () => {\n  const [color, setColor] = useState(0);\n  const [canvasSize, setCanvasSize] = useState(20);\n\n  return (\n    <div className=\"App\">\n      <CanvasOptions setCanvasSize={size => setCanvasSize(size)} />\n      <div className=\"canvas\">\n        <ColorPicker currentColor={color} setColor={color => setColor(color)} />\n        <Canvas currentColor={color} size={canvasSize} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}